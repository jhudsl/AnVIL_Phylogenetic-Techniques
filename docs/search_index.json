[["index.html", "Molecular Phylogenetic Techniques About this Book AnVIL Collection", " Molecular Phylogenetic Techniques June 06, 2022 About this Book This book is part of a series of books for the Genomic Data Science Analysis, Visualization, and Informatics Lab-space (AnVIL) of the National Human Genome Research Institute (NHGRI). Learn more about AnVIL by visiting https://anvilproject.org or reading the preprint. AnVIL Collection Please check out our full collection of AnVIL and related resources below! Book Name Link AnVIL: Getting Started https://jhudatascience.org/AnVIL_Book_Getting_Started AnVIL: Instructor Guide https://jhudatascience.org/AnVIL_Book_Instructor_Guide AnVIL: WDL https://jhudatascience.org/AnVIL_Book_WDL GDSCN: SARS Galaxy on AnVIL https://jhudatascience.org/GDSCN_Book_SARS_Galaxy_on_AnVIL GDSCN: Statistics for Genomics Differential Expression https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_Differential_Expression GDSCN: Statistics for Genomics PCA https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_PCA GDSCN: Statistics for Genomics RNA-seq https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_RNA-seq GDSCN: Statistics for Genomics scRNA-seq https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_scRNA-seq "],["introduction.html", "Chapter 1 Introduction 1.1 Motivation 1.2 Target Audience 1.3 Curriculum", " Chapter 1 Introduction This book offers an introduction to molecular phylogenetic analyses using RStudio on AnVIL. Students will learn how to choose sequences for analysis, alignment, and the major methods of tree inference, as well as how to create useful phylogenetic tree figures. 1.1 Motivation Coming soon! 1.2 Target Audience The course is intended for advanced undergraduates with an understanding of evolutionary biology, or for graduate students. Experience with R is not necessary but is helpful. 1.3 Curriculum Coming soon! "],["sign-in.html", "Chapter 2 Sign in", " Chapter 2 Sign in You need to sign into Terra with your Google account to allow your instructor to add you to projects and/or Workspaces associated with your specific class. This is the only way you can launch applications and perform computations on AnVIL. You can access Terra by going to anvil.terra.bio, or by clicking the link on the AnVIL home page. Sign in using the drop-down menu in the upper-left-hand corner. "],["create-a-workspace.html", "Chapter 3 Create a workspace", " Chapter 3 Create a workspace On AnVIL, you use Workspaces to configure and run analyses and share results. Workspaces support interactive analysis with RStudio, Jupyter notebooks, Bioconductor and Galaxy. Workspaces can also save the output generated by running an analysis with a Workspace’s associated “cloud environment.” Check out https://anvilproject.org to learn more about everything you can do within a Workspace. In the drop-down menu on the left, navigate to “Workspaces”. Click the triple bar in the top left corner to access the menu. Click “Workspaces”. Click on the plus icon near the top of left of the page. Name your Workspace and select the Billing Project as indicated by your instructor. Do not change the Bucket Location or Authorization Domain. You can add a Description if you wish. Click “CREATE WORKSPACE”. The new Workspace should now show up under your Workspaces. "],["rstudio.html", "Chapter 4 Working in RStudio 4.1 Launch RStudio Cloud Environment 4.2 Tour RStudio 4.3 Pause RStudio 4.4 Delete RStudio Cloud Environment 4.5 Video Guide", " Chapter 4 Working in RStudio Once you have created a Workspace, you can create an RStudio cloud environment. This will allow you to interface with data and perform genomics-based analyses with add on packages from the Bioconductor community. 4.1 Launch RStudio Cloud Environment Click on the name of the Workspace you just created. You should be routed to a link that looks like: https://anvil.terra.bio/#workspaces/&lt;billing-project&gt;/&lt;workspace-name&gt;. On the top right, Click the gear icon to access your Cloud Environment options. You will see a list of costs because it costs a small amount of money to use cloud computing. Click “CUSTOMIZE”. Click on the first drop down menu to see what other software configurations are available. Scroll down and select RStudio from the Community-Maintained RStudio Environments section. NOTE: AnVIL is very versatile and can scale up to use very powerful cloud computers. It’s very important that you select the cloud computing environment described here to avoid runaway costs. Leave everything else as-is. To create your RStudio Cloud Environment, click on the “CREATE” button. Your Cloud Environment will be available in a few minutes after the cloud resources are provisioned and your software starts up. The upper right corner displays the status and should say “Creating” while resources are being provisioned. After a few minutes, you will see the status change to “Running”. Click on the “R” icon to launch RStudio. You should now see the RStudio interface with information about the version printed to the console. 4.2 Tour RStudio Next, we will be using RStudio and the package Glimma to create interactive plots. See this vignette for more information. The Bioconductor team has created a very useful package to programmatically interact with Terra and Google Cloud. Install the AnVIL package. It will make some steps easier as we go along. BiocManager::install(&quot;AnVIL&quot;) You can now quickly install precompiled binaries using the AnVIL package’s install() function. We will use it to install the Glimma package and the airway package. The airway package contains a SummarizedExperiment data class. This data describes an RNA-Seq experiment on four human airway smooth muscle cell lines treated with dexamethasone. {Note: for some of the packages in this class, you will have to install packaged from the CRAN repository, using the install.packages() function. The examples will show you which install method to use.} ```r AnVIL::install(c(&quot;Glimma&quot;, &quot;airway&quot;)) ``` &lt;img src=&quot;resources/images/02-rstudio_files/figure-html//1BLTCaogA04bbeSD1tR1Wt-mVceQA6FHXa8FmFzIARrg_g11f12bc99af_0_56.png&quot; title=&quot;Screenshot of the RStudio environment interface. Code has been typed in the console and is highlighted.&quot; alt=&quot;Screenshot of the RStudio environment interface. Code has been typed in the console and is highlighted.&quot; width=&quot;480&quot; /&gt; Load the example data. library(airway) data(airway) The multidimensional scaling (MDS) plot is frequently used to explore differences in samples. When this data is MDS transformed, the first two dimensions explain the greatest variance between samples, and the amount of variance decreases monotonically with increasing dimension. The following code will launch a new window where you can interact with the MDS plot. Glimma::glimmaMDS(assay(airway), group = colData(airway)$dex) Change the colour_by setting to “groups” so you can easily distinguish between groups. In this data, the “group” is the treatment. You can download the interactive html file by clicking on “Save As”. You can also download plots and other files created directly in RStudio. To download the following plot, click on “Export” and save in your preferred format to the default directory. This saves the file in your cloud environment. limma::plotMDS(airway) You should see the plot in the “Files” pane. Select this file and click “More” &gt; “Export” Select “Download” to save the file to your local machine. 4.3 Pause RStudio The upper right corner reminds you that you are accruing cloud computing costs. You should minimize charges when you are not performing an analysis. You can do this by clicking on “Stop cloud environment”. This will release the CPU and memory resources for other people to use. Note that your work will be saved in the environment and continue to accrue a very small cost. Your instructor can delete these environments to stop costs accruing, so it’s a good idea to save code or output somewhere else, such as GitHub or your local machine. 4.4 Delete RStudio Cloud Environment Stopping your cloud environment only pauses your work. When you are ready to delete the cloud environment, click on the gear icon in the upper right corner to “Update cloud environment”. Click on “Delete Environment Options”. If you are certain that you do not need the data and configuration on your disk, you should select “Delete everything, including persistent disk”. Select “DELETE”. 4.5 Video Guide In addition to the steps above, you can review this video guide on how to launch RStudio on AnVIL. The slides for this tutorial are are located here. sessionInfo() ## R version 4.0.2 (2020-06-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] knitr_1.33 magrittr_2.0.2 hms_0.5.3 R6_2.4.1 ## [5] rlang_0.4.10 highr_0.8 stringr_1.4.0 httr_1.4.2 ## [9] tools_4.0.2 xfun_0.26 png_0.1-7 jquerylib_0.1.4 ## [13] htmltools_0.5.0 ellipsis_0.3.1 ottrpal_0.1.2 yaml_2.2.1 ## [17] digest_0.6.25 tibble_3.0.3 lifecycle_1.0.0 crayon_1.3.4 ## [21] bookdown_0.24 readr_1.4.0 vctrs_0.3.4 fs_1.5.0 ## [25] curl_4.3 evaluate_0.14 rmarkdown_2.10 stringi_1.5.3 ## [29] compiler_4.0.2 pillar_1.4.6 pkgconfig_2.0.3 "],["phylogenetics-basics.html", "Chapter 5 Phylogenetics basics 5.1 How to read a phylogenetic tree 5.2 Outgroups 5.3 Branch lengths", " Chapter 5 Phylogenetics basics 5.1 How to read a phylogenetic tree A phylogeny, or phylogenetic tree, is a diagram that shows the evolutionary history and relationships among or within groups of organisms. Phylogenetics was traditionally a somewhat obscure field in which systematists (biologists concerned with arranging organisms into a tree that showed their ancestral relatedness) arranged related living organisms at the tips (or “leaves” of the tree), and made branches to connect different organisms back to putative ancestral organisms. Here’s a phylogeny of the family Ursidae (the bears). In this tree, all the extant species (or currently living species) are at the tips on the far right side of the phylogeny. Inferences about how the bear species are related become apparent as you move away from the tips down the branches. When two branches meet at a node (as they do at point A), you can assume the species at the tips of those branches share a common ancestor. For example, this phylogeny of the Ursidae indicates that American black bears and Asian black bears share a common ancestor (indicated by the node at point A). However, we don’t know what the common ancestor is for certain, we are just inferring based on similarities between the species that exist today. Nodes that are closer to the tips indicate species that are more closely related (and thus indicate a more recent common ancestor than nodes farther away from the tips). American black bears are more closely related to Asian black bears than to American black bears are to giant pandas, because the American black bear branch connects to a node shared by the Asian black bear branch (point A) before it connects to a node shared with the giant panda branch (point B). Another unusual thing about phylogenies is we can change the order of the taxa on the tips without actually changing the topology of the tree. These two trees are the same, even though we have changed the position of the labels of American black bear and Asian black bear. In phylogenetic trees, relatedness is expressed by the distance to a common node between two species, NOT by whether the labels are near each other. Branches can rotate freely around nodes without changing the tree. 5.2 Outgroups Although this is a phylogeny of the Ursidae, you might have noticed there are two branches belonging to the gray wolf and the spotted seal, neither of which is a bear. These two species are included as outgroups. Outgroups are taxa that are only distantly related to the group of interest and serve as reference points for determining evolutionary changes. 5.3 Branch lengths Branch lengths (the distance between two nodes, or between a node and a tip), may or may not be indicative of the passage of a particular amount of time. It depends on how the tree was inferred (we infer phylogenetic trees, we don’t make them). If the tree is created by parsimony or neighbor-joining methods, the branches simply indicate that there was one (or more) change from the ancestor to the descendant. If the tree was created using maximum likelihood methods, the branch lengths represent how many genetic changes occurred over time. Regardless of how the trees are constructed, they are estimates of what we think happened historically. Each estimate contains within it implicit assumptions about rates of mutation accumulating, likelihood of different types of changes being more common (transitions vs. transversions, for example), and so on. The tree is our best hypothesis as to the history of the organisms on it, but it is only a hypothesis. At one time, only morphological data could be used to make these trees. Thus, phylogenetic trees might have been based on similarities of bone structures, or fur types, or other gross physiological features. Even though the trees were called “phylogenetic” trees, they were not based on genetic data. Now, phylogenetic trees are generally based on DNA sequence (for closely related species) or amino acid sequences (for more distantly related species). Furthermore, the trees are generally based on several genetic loci, rather than on the whole genome. This is changing, with next generation sequencing and advances in computing power. Nevertheless, at present most phylogenetic trees are “gene trees” rather than “species trees,” and it is important to remember that selection or drift on a particular locus can influence a tree so that it reflects the history of the gene, but NOT the history of the species "],["visualizing-trees-in-r.html", "Chapter 6 Visualizing trees in R 6.1 Creating a Newick object 6.2 Drawing trees 6.3 Adding outgroups 6.4 Drawing trees multiple ways 6.5 The phylo class", " Chapter 6 Visualizing trees in R 6.1 Creating a Newick object Computer programs use the Newick tree format for phylogenetic trees. This format uses a series of parentheses, commas, and colons to store information about evolutionary relationships. (A,B) indicates a pair of taxa that form their own group, or clade ((A,B),C) indicates the next most closely related taxon to the A-B clade is taxon C (A:5,B:7) tells the program (and us!) the length of the branch connecting each taxon to the node. In this case, the branch length between the node and A is 5 and the branch length for B is 7. The total distance between A and B is 5+7, or 12. ((A,B),C)); tells the program the tree is complete. If the semicolon is missing at the end, the program will keep looking for information on another taxon. For this exercise, we are going to create an R object in Newick formula that illustrates the relationships among several species of mammals. #install.packages(&#39;ape&#39;) #this installs the ape package #install.packages(&#39;nlme&#39;) #this installs the nlme package library(ape) #this opens the ape package library(nlme) #this opens the nlme package #we first create an object that stores the tree information mammal.1 &lt;- read.tree(text = &quot;((((raccoon:19.19959,bear:6.80041):0.84600, weasel:18.87953):2.09460):3.87382,dog:25.46154);&quot;) #typing the name of the object means R will tell us about it mammal.1 ## ## Phylogenetic tree with 4 tips and 4 internal nodes. ## ## Tip labels: ## raccoon, bear, ## weasel, dog ## ## Rooted; includes branch lengths. We now have a phylogenetic tree loaded into R. Why is it called Newick format? This is what Joe Felsenstein, one of the giants of the phylogenetic field, says: “The Newick Standard was adopted 26 June 1986 by an informal committee meeting convened by me during the Society for the Study of Evolution meetings in Durham, New Hampshire and consisting of James Archie, William H.E. Day, Wayne Maddison, Christopher Meacham, F. James Rohlf, David Swofford, and myself. (The committee was not an activity of the SSE nor endorsed by it). The reason for the name is that the second and final session of the committee met at Newick’s restaurant in Dover, New Hampshire, and we enjoyed the meal of lobsters. The tree representation was a generalization of one developed by Christopher Meacham in 1984 for the tree plotting programs that he wrote for the PHYLIP package while visiting Seattle. His visit was a sabbatical leave from the University of Georgia, which thus indirectly partly funded that work.” 6.2 Drawing trees It is quite difficult for humans to quickly interpret the relationships and branch lengths in the Newick format. Luckily, R (and other phylogenetics programs) can convert Newick formats into a more understandable form. #plot is the command we use to create trees with the ape package #one of the options is the type of tree the command draws #this can also be written as plot(mammal.1, &quot;u&quot;) plot(mammal.1, type=&quot;unrooted&quot;) You’ve inferred an unrooted tree. It probably looks a bit different than trees you’ve seen before (including the one in the previous section); most trees are displayed in a rooted form. We can do that by specifying that we want to draw a phylogram. If you don’t declare an outgroup first, R will choose to root the phylogram halfway between the two longest branches (this is called midpoint rooting). #here we draw a phylogram #alternatively, you can use the command: #plot(plot(mammal.1), as phylogram is the default type plot(mammal.1, type=&quot;phylogram&quot;) Now the tree looks more like the Ursidae tree we examined earlier. The order of the tips is partly determined by the order in which we wrote the taxa in our Newick format. We can change the order of the tips and still have the same tree. mammal.2 &lt;- read.tree(text = &quot;((((bear:6.80041,raccoon:19.19959):0.84600, weasel:18.87953):2.09460):3.87382,dog:25.46154);&quot;) #this bit of code here tells R to put the trees in side-by-side in #a single row (1 row, 2 columns) par(mfrow=c(1,2)) plot(mammal.1) plot(mammal.2) Clades can rotate freely around nodes without changing the relationships among the tips. Although the “weasel” label is closer to “bear” in our first tree than it is in the second tree, the evolutionary distance between the two is the same in both trees, because we trace through the same nodes to find their common ancestor. Both of these trees are exactly the same, in a phylogenetic sense. 6.3 Adding outgroups Let’s add some more taxa to our tree! mammal.3 &lt;- read.tree(text = &quot;((raccoon:19.19959,bear:6.80041):0.84600,((sea_lion:11.99700, seal:12.00300):7.52973,((monkey:100.85930,cat:47.14069):20.59201, weasel:18.87953):2.09460):3.87382,dog:25.46154);&quot;) mammal.3 ## ## Phylogenetic tree with 8 tips and 6 internal nodes. ## ## Tip labels: ## raccoon, bear, sea_lion, ## seal, monkey, cat, ... ## ## Unrooted; includes branch lengths. We’ve now added an additional 5 taxa to our tree of mammalian species. Let’s first take a look at the unrooted tree. plot(mammal.3, type=&quot;u&quot;)#&quot;u&quot; is short for &quot;unrooted&quot; Even with the unrooted tree, we can see that some species are definitely more closely related than others. In fact, it looks like both “cat” and “monkey” are pretty distantly related to the others, since the branches connecting these taxa are much longer than any other branch. Given this information, we will define these two taxa as our outgroup and redraw our tree, this time as a rooted phylogram. #this command tells R that monkey and cat are outgroups mammal.3.root &lt;- root(mammal.3, outgroup = c(&#39;monkey&#39;,&#39;cat&#39;)) plot(mammal.3.root, type=&quot;p&quot;)#&quot;p&quot; is short for &quot;phylogram&quot; 6.4 Drawing trees multiple ways So far you’ve drawn trees in two ways - unrooted, and as a phylogram. For both of these tree types, the branch lengths are scaled to indicate evolutionary distance (or how many changes have occurred). As a result, the tips aren’t all even with each other. There are two other common ways of drawing trees. The radial tree (sometimes called the fan tree) arranges all the branches in a circle. This is a popular way to draw a phylogeny with many tips that would otherwise take up a lot of space. #now we&#39;re looking at three different trees next to each other #basically, figures are in 1 row and 3 columns par(mfrow=c(1,3)) plot(mammal.3, type=&quot;u&quot;) plot(mammal.3.root, type=&quot;p&quot;) plot(mammal.3.root, type=&quot;f&quot;)#f is short for &quot;fan&quot; All three of these trees show exactly the same information. The last common way to draw trees is as a cladogram. Cladograms are a little different than the others, because the branches are not scaled to evolutionary distance. Instead, the tree is drawn so that all the tips (taxa) are lined up. It is often easier to see relationships in a cladogram, particularly if the internode distances (the distance between two internal nodes of a tree) are small. To properly draw a cladogram, we will rewrite our tree in Newick formula so that it doesn’t include branch lengths. mammal.4 &lt;- read.tree(text = &quot;(dog,(raccoon,bear),((seal,sea_lion), ((monkey,cat), weasel)));&quot;) mammal.4.root &lt;- root(mammal.4, outgroup = c(&#39;monkey&#39;,&#39;cat&#39;)) par(mfrow=c(1,2)) plot(mammal.3.root, type=&quot;p&quot;) plot(mammal.4.root, type=&quot;c&quot;)#c is short for &quot;cladogram&quot; QUESTIONS What is the total branch length between “bear” and “raccoon”? (You will need to look at the tree in Newick format.) Does “weasel” share a more common recent ancestor with “seal” or with “sea lion”? Why does it look like “weasel” is more closely related to “bear” in the tree with four taxa, but it looks like “dog” is more closely related to “bear” in the tree with eight taxa? (HINT: Think about the purpose of an outgroup, and whether we specified one for the four-taxa tree.) 6.5 The phylo class When we use the ape package, R converts a tree in Newick format to an object of the phylo class. This is basically a list of four dataframes. str(mammal.3.root) ## List of 4 ## $ edge : int [1:13, 1:2] 9 14 12 10 11 11 10 12 13 13 ... ## $ edge.length: num [1:13] 20.592 2.095 3.874 0.846 19.2 ... ## $ Nnode : int 6 ## $ tip.label : chr [1:8] &quot;raccoon&quot; &quot;bear&quot; &quot;sea_lion&quot; &quot;\\nseal&quot; ... ## - attr(*, &quot;class&quot;)= chr &quot;phylo&quot; ## - attr(*, &quot;order&quot;)= chr &quot;cladewise&quot; Each dataframe holds information about some part of the tree. edge: the number of steps needed to connect two tips. It’s easiest to think of each branch as an edge. edge.length: the length of each corresponding edge, or branch Nnode: the number of nodes in the tree tip.label: the tip names (the taxa) sessionInfo() ## R version 4.0.2 (2020-06-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] nlme_3.1-149 ape_5.4-1 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.8 knitr_1.33 magrittr_2.0.2 hms_0.5.3 ## [5] lattice_0.20-41 R6_2.4.1 rlang_0.4.10 highr_0.8 ## [9] stringr_1.4.0 tools_4.0.2 parallel_4.0.2 grid_4.0.2 ## [13] xfun_0.26 jquerylib_0.1.4 htmltools_0.5.0 ellipsis_0.3.1 ## [17] ottrpal_0.1.2 yaml_2.2.1 digest_0.6.25 tibble_3.0.3 ## [21] lifecycle_1.0.0 crayon_1.3.4 bookdown_0.24 readr_1.4.0 ## [25] vctrs_0.3.4 fs_1.5.0 evaluate_0.14 rmarkdown_2.10 ## [29] stringi_1.5.3 compiler_4.0.2 pillar_1.4.6 pkgconfig_2.0.3 "],["what-sequences-should-i-choose.html", "Chapter 7 What sequences should I choose?", " Chapter 7 What sequences should I choose? Phylogenies are only as good as the data used to infer them, so it’s worth it to the spend some time carefully choosing the genomic regions and samples you will use. Good planning from the beginning will save you headaches further downstream. First, you should ask yourself: what information are you hoping to gain from the tree? Are you hoping to reconstruct the history of organisms, or the history of a region of DNA, or the history of a protein? The answer will guide your choice of sequence and samples. For closely related species in which you might hope to figure out some sort of information about the divergence between the species (including the timing of the divergence), you would use areas of the genome known to accumulate changes rapidly (non-coding regions that also do not have functionality, or whose functionality is not easily changed by changes in the DNA base sequence). Some examples of rapidly changing genetic regions include the mitochondrial control region, the wobble base on mitochondrial coding regions, and nuclear introns. It is also important to use “dense taxon sampling” among closely related species because any small change can seem disproportionately important in a recent divergence. Having multiple individuals sampled from each phylogenetic unit of interest (could be species, subspecies, or populations) helps to compensate by showing the genetic divergence within a group. This within-group divergence can then be accurately compared to the genetic divergence between two groups. For more divergent species and comparisons, you use areas of the genome that do not change as rapidly. For example, if you wanted to do a survey of the placental mammals, you could choose a gene region that is under enough selection pressure that it mutates more slowly than the regions you would choose for closely related species. If you are examining the relationships among deeply divergent species, or when the base-pair signal is completely swamped out over time, you might search for amino acid sequence similarities instead of DNA sequence similarities. Because of wobble, amino acid sequence can remain the same even when bases change. Sometimes amino acids of similar size/charge/shape can be substituted for others, which would result in a complete change in base pair sequence (and loss of ability to find similar sequences), but allows for finding similarities through amino acid sequence. Even when using protein sequence, it is often helpful to extract the coding sequence (once similar protein sequences have been found), because that adds extra information to fine tune the phylogenetic analysis. This technique can also be used when the primary goal is to trace the history of a particular gene (when the changes in the gene itself are of interest.) To attempt a reconstruction of the evolutionary history of organisms, you really should use multiple lines of evidence and not rely solely on genomic data. For example to reconstruct primate evolution, one looks at the fossil record, molecular divergence, and also phylogeographic evidence (how these things map onto our understanding of the geography of the earth at various crucial time points along primate evolution). Examples of phylogeographic evidence include understanding when terrestrial (land-based) organisms might have been cut off from each other due to the formation of a river or lake, the eradication of a land bridge by melting glaciers and a rise in the earth’s temperature (which raises the sea level). Alas, for this book, we are limited to only using genomic data. "],["finding-sequences-in-genbank.html", "Chapter 8 Finding sequences in GenBank 8.1 Identifying a query sequence on GenBank 8.2 blastn 8.3 Identifying an outgroup", " Chapter 8 Finding sequences in GenBank 8.1 Identifying a query sequence on GenBank For this book, we will use Glu-1 sequences from a variety of species to infer our tree. Glu-1 is a gene that encodes one of the subunits used to make gluten in plants like wheat. We will use this gene to reconstruct some of the deeper phylogenetic relationships among the grasses. We’re going to temporarily leave AnVIL and RStudio and head to NCBI’s website. We start by searching for Glu-1 sequences in the NCBI nucleotide database. At the top of the website, use the pulldown menu to choose “Nucleotide” and enter “glu-1” in the search bar. You might notice that this returns thousands upon thousands of possible sequences. While it’s nice having choices, having too many results makes it difficult to know where to start. Instead, we’re going to narrow down our sequence choices by specifying that we want Glu-1 sequences from common wheat, or Triticum aestivium. This is a good starting point, since we know that common wheat plants make the gluten protein, so the genome should contain Glu-1. The first hit (at least from when this guide was created) is exactly what we’re looking for - the complete coding sequence for the high molecular weight glutenin subunit, the Glu-1 gene. If we click on the link at the top of the entry, we can go to the GenBank page for this particular entry. This page contains a lot of information about the sequence, including which research group generated it, if the sequence was used in published research, and the full taxonomy of the sample. At the top, we also find the accession number, or the unique ID assigned to this particular sequence. Highlight and copy the accession number - this is what we will use for our next step, a BLAST search. 8.2 blastn NCBI created a tool that allows us to use the basic local alignment search tool (BLAST) algorithm to find sequences similar to our query sequence (in this case, the Triticum aestivium sequence we identified above). Here’s a link for NCBI’s web tool: BLAST. There are many tutorials on how to use BLAST (including NCBI’s own), so this section is going to focus primarily on the logic behind choosing sequences for phylogenetic analysis, not just the steps. Once you open the BLAST webpage, you have five options for searching (the tabs at the top of the page). Which method you choose depends on your query sequence. We’re going to work with two of them: blastn, which identifies DNA sequences that are most similar to the DNA (or nucleotide) query sequence; and blastp, which does the same for protein sequences. For the blastn search, all we need to do is paste the accession code from earlier into the search box and change our program selection to somewhat similar sequences (blastn). Next, let’s go down to the bottom of the page to the algorithm parameters section. We need to change the max number of target sequences (the maximum number of sequences for our search to return). Given how rapidly the size of the GenBank databases are growing, leaving this value at 100 means we will miss a lot of sequences that we might otherwise want to see. For now, we can leave the other parameters as the default settings. The click the BLAST button on the bottom left. It can take a couple of minutes for the blastn search to finish. When it does, a webpage similar to the figure above will open. On the right side of the screen, we have the option of applying additional filters to our search. Because we are interested in looking at the deeper phylogenetic relationships among the grass family, we don’t necessarily want any additional Triticum aestivium sequences, so we will filter them out. That leaves us with over 2,000 other sequences from which to choose our taxa. (If you were interested in more shallow phylogenetic relationships, choosing multiple sequences from the same taxa, or dense taxon sampling, is a good decision.) There are three quality-control statistics at which we want to look. query cover: the amount of overlap between our query sequence and the newly-aligned sequence; larger is better _E value_ (expect value): the number of hits expected by chance; like p-values, a lower number is better *per ident (percent identity): the percent similarity between the two sequences; larger is better We can filter or sort on any of these statistics. At this point we need to really look at the aligned sequences and decide which ones we want to use. There are quite a few samples from a variety of grass species that show good overlap, low E values, and high percent identities. Since we have options, we will prioritize choosing samples with complete coding sequence whenever possible (and avoid any sample labeled “pseudogene”, since that isn’t the actual Glu-1 gene sequence). We will focus on these 9 sequences (in addition to the common wheat sequence we identified earlier): EF105403.1, Thinopyrum intermedium (intermediate wheatgrass) DQ073553.1, Leymus racemosus (mammoth wild rye) EF204545.1, Lophopyrum elongatum (tall wheatgrass) AJ314771.1, Secale cereale (rye) FJ481569.1, Henrardia (a genus of Asiatic wheatgrass) DQ073533.1, Agropyron cristatum (crested wheatgrass) AY804128.1, Aegilops tauschii (Tausch’s goatgrass) AY303125.2, Taeniathetum caput (medusahead rye) KF887414.1, Dasypyrum villosum (mosquito grass) A quick check of the taxonomy confirms that all of these samples are from the grass family, family Poaceae. 8.3 Identifying an outgroup We have two approaches we could take for identifying an outgroup - we could use a more distantly related taxon, or we could use a homologous gene sequence from a more closely-related taxon. When we look up information about the Poaceae, we find there are three clades within the family - cereal grasses (like wheat), bamboos, and grasses (such as those species found in natural grasslands or cultivated for lawns and pastures). In the list of 10 related sequences above, we don’t have any sequences from the bamboos (subfamily Bambusoideae). Glu-1 from a bamboo species might make a nice outgroup, if we can find a sequence for it. First, we’ll try another blastn search, this time setting the program selection to more dissimilar sequences (discontiguous megablast) When we get those results back, we can filter for samples within the subfamily Bambusoideae. Alas, we have no sequences that match. The next thing we can try is a blastp search. These searches are nice for identifying more distantly related samples, because the protein sequence of a gene changes more slowly than the nucleotide sequence. In order to run a blastp search, we need a protein sequence for our query. Luckily, we chose a full coding sequence. When we look at the GenBank entry for JX915632, we can find the coding sequence translated into the amino acids at the bottom of the page. We can copy this amino acid sequence and paste it into the query box on the blastp page. After the blastp search finishes and we filter out Triticum aestivium results, we end up with several hundred matches. Great! …or is it? Unfortunately, all of the samples that are returned have very poor query coverage (less than 25%). None of these samples are likely to work for our purposes. Instead, we will have to try a homologous gene from a closely-related taxon. In our first blastn search, samples labeled “D-hordein” showed up near the bottom of the results. A Google search suggests that D-hordein is a barley homolog to the wheat Glu-1 gene product. This might serve nicely as an outgroup. We will add 2 additional sequences to our list, for a total of 11: D82941.1, Hordeum vulgare (barley) D-hordein JX276655.1, Elymus sibiricus (Siberian wild rye) D-hordein "],["downloading-the-sequences-from-genbank.html", "Chapter 9 Downloading the sequences from GenBank 9.1 The DNA.bin object 9.2 The fasta format", " Chapter 9 Downloading the sequences from GenBank Now that we have identified the sequences for our tree, we need to download those sequences from GenBank into R. One option is to download the sequences directly from GenBank as a fasta file. If you are interested in this option, here is a good tutorial on how to do it. This will work and the subsequent fasta file can be uploaded into R. 9.1 The DNA.bin object However, the library ape has a command that allows us to download sequences from GenBank directly into R and store the sequences as a DNA.bin object. This is a data structure that stores information like DNA sequence, how long each sequence is, information about the species identification of each sequence, and the total base percentages of all the sequences. The command we’re using is read.GenBank, which takes an argument of the accession number we want to download from GenBank. Since we want to download multiple sequences, We use c(““) to concatenate a string of accession numbers that read.Genbank will interpret. library(ape) #if you haven&#39;t previously loaded ape read.GenBank(c(&quot;JX915632&quot;,&quot;EF105403.1&quot;,&quot;DQ073553.1&quot;, &quot;FJ481575.1&quot;,&quot;EF204545.1&quot;,&quot;AJ314771.1&quot;,&quot;FJ481569.1&quot;, &quot;DQ073533.1&quot;,&quot;AY804128.1&quot;,&quot;AY303125.2&quot;,&quot;KF887414.1&quot;, &quot;D82941.1&quot;,&quot;JX276655.1&quot;)) ## 13 DNA sequences in binary format stored in a list. ## ## Mean sequence length: 1814.385 ## Shortest sequence: 1476 ## Longest sequence: 2490 ## ## Labels: ## JX915632 ## EF105403.1 ## DQ073553.1 ## FJ481575.1 ## EF204545.1 ## AJ314771.1 ## ... ## ## Base composition: ## a c g t ## 0.310 0.303 0.271 0.115 ## (Total: 23.59 kb) Now that you have seen what read.Genbank does, we will save it as an object, and also specify that we want the sequences in ATGC form. When as.character=TRUE is not included (like above), read.GenBank saves all the sequence data in a binary format. Binary is great for computers, but harder for humans to quickly interpret. grass &lt;- read.GenBank(c(&quot;JX915632&quot;,&quot;EF105403.1&quot;,&quot;DQ073553.1&quot;, &quot;FJ481575.1&quot;,&quot;EF204545.1&quot;,&quot;AJ314771.1&quot;,&quot;FJ481569.1&quot;, &quot;DQ073533.1&quot;,&quot;AY804128.1&quot;,&quot;AY303125.2&quot;,&quot;KF887414.1&quot;, &quot;D82941.1&quot;,&quot;JX276655.1&quot;)) R BASICS In R, you can do two things with the output of a command. First, you can have the output displayed immediately. This is what you did in the first block of R code above. This can be really helpful if you want to immediately see what your command did, but it’s less helpful if you want to do something with the output. In the first block of code, we managed to download sequences from GenBank and print them to the screen, but we don’t have a way to build trees from the printed screen. (Print in this case refers to the display you see on the R console.) Second, you can tell R to save the output as an object. This is what we did second block of code with grass &lt;- read.GenBank. The &lt;- operator tells R to redirect the output from read.GenBank to an object (or data structure) named grass. Everything you saw printed on the screen from the first block of code is now saved to grass. If we ever want to see what objects we have saved in our R session, we can do so by typing the command ls() This tells R to list objects. We can see what each object contains by either typing the name of the object or by using the str (structure) command. The syntax of the structure command is str(object_name) 9.2 The fasta format While ape and related R packages have no difficulty interpreting a DNA.bin object, other programs need the data in the fasta format. Fasta is a really common format for saving bioinformatic data (probably the most common format used!). The format itself is quite simple and consists of two lines. The first line is the header line, which starts with &gt;, immediately followed by a unique identifier. The sequence itself is on the second line. The sequence can either the standard IUPAC nucleic acid or amino acid codes, with additional characters for gaps (-), uracil (U), or translation stops (*). The first 60 nucleotides from the Triticum aestivium sequence from above might look like this in fasta format: JX915632_Triticum_aestivium atggctaagcggctggtcctctttgcagcagtagccgtcgccctcgtggctctcaccgcc We can convert and save our DNA.bin object in fasta format using a tool from the ape package. The write.dna commands takes three arguments: the first argument tells R the DNA.bin file to use, the second argument says what to name the new file, and the third argument says what format to use for the new file. write.dna( grass, file = &#39;grass.fasta&#39;, format = &#39;fasta&#39; ) If you check your RStudio files (on the lower left side of the screen, you’ll see a tab named Files), you should see a newly-created file called “grass.fasta”. If you open it up, the file will look something like this: Going forward, we will use both the DNA.bin object and the fasta file. R BASICS You might have noticed that we didn’t save the output of write.dna to an object. That’s because any of the write commands are automatically saving the output to a file on your computer (or, on AnVIL, to your persistent disk). The output is saved in what as known as your working directory. You can check what your current working directory is during any R session with the command getwd() sessionInfo() ## R version 4.0.2 (2020-06-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] ape_5.4-1 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.8 knitr_1.33 magrittr_2.0.2 hms_0.5.3 ## [5] lattice_0.20-41 R6_2.4.1 rlang_0.4.10 stringr_1.4.0 ## [9] tools_4.0.2 parallel_4.0.2 grid_4.0.2 nlme_3.1-149 ## [13] xfun_0.26 jquerylib_0.1.4 htmltools_0.5.0 ellipsis_0.3.1 ## [17] ottrpal_0.1.2 yaml_2.2.1 digest_0.6.25 tibble_3.0.3 ## [21] lifecycle_1.0.0 crayon_1.3.4 bookdown_0.24 readr_1.4.0 ## [25] vctrs_0.3.4 fs_1.5.0 evaluate_0.14 rmarkdown_2.10 ## [29] stringi_1.5.3 compiler_4.0.2 pillar_1.4.6 pkgconfig_2.0.3 "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor Elizabeth Humphries Content Idea Contributor Ava Hoffman, Frederick Tan Content Directors Elizabeth Humphries, Jeff Leek, Frederick Tan Production Content Publisher Ira Gooding Technical Template Publishing Engineers Candace Savonen, Carrie Wright, Ava Hoffman Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Candace Savonen Package Developers (ottrpal) John Muschelli, Candace Savonen, Carrie Wright Funding Funder National Human Genome Research Institute (NHGRI) Funding Staff Fallon Bachman, Jennifer Vessio, Emily Voeglein   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.3 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2022-06-06 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.3) ## bookdown 0.24 2022-02-15 [1] Github (rstudio/bookdown@88bc4ea) ## callr 3.4.4 2020-09-07 [1] RSPM (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] RSPM (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [1] RSPM (R 4.0.3) ## fansi 0.4.1 2020-01-08 [1] RSPM (R 4.0.0) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] RSPM (R 4.0.1) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## knitr 1.33 2022-02-15 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.2) ## magrittr 2.0.2 2022-01-26 [1] CRAN (R 4.0.2) ## memoise 1.1.0 2017-04-21 [1] RSPM (R 4.0.0) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.3.4 2020-08-11 [1] RSPM (R 4.0.2) ## purrr 0.3.4 2020-04-17 [1] RSPM (R 4.0.3) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## rlang 0.4.10 2022-02-15 [1] Github (r-lib/rlang@f0c9be5) ## rmarkdown 2.10 2022-02-15 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2022-02-15 [1] Github (R-lib/testthat@e99155a) ## usethis 2.1.5.9000 2022-02-15 [1] Github (r-lib/usethis@57b109a) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2022-02-15 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library 2022 GitHub, Inc. Terms Privacy Security Status Doc "],["references.html", "Chapter 10 References", " Chapter 10 References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
