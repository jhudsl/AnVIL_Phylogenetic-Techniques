[["index.html", "Molecular Phylogenetic Techniques About this Book AnVIL Collection", " Molecular Phylogenetic Techniques May 30, 2022 About this Book This book is part of a series of books for the Genomic Data Science Analysis, Visualization, and Informatics Lab-space (AnVIL) of the National Human Genome Research Institute (NHGRI). Learn more about AnVIL by visiting https://anvilproject.org or reading the preprint. AnVIL Collection Please check out our full collection of AnVIL and related resources below! Book Name Link AnVIL: Getting Started https://jhudatascience.org/AnVIL_Book_Getting_Started AnVIL: Instructor Guide https://jhudatascience.org/AnVIL_Book_Instructor_Guide AnVIL: WDL https://jhudatascience.org/AnVIL_Book_WDL GDSCN: SARS Galaxy on AnVIL https://jhudatascience.org/GDSCN_Book_SARS_Galaxy_on_AnVIL GDSCN: Statistics for Genomics Differential Expression https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_Differential_Expression GDSCN: Statistics for Genomics PCA https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_PCA GDSCN: Statistics for Genomics RNA-seq https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_RNA-seq GDSCN: Statistics for Genomics scRNA-seq https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_scRNA-seq "],["introduction.html", "Chapter 1 Introduction 1.1 Motivation 1.2 Target Audience 1.3 Curriculum", " Chapter 1 Introduction This book offers an introduction to molecular phylogenetic analyses using RStudio on AnVIL. Students will learn how to choose sequences for analysis, alignment, and the major methods of tree inference, as well as how to create useful phylogenetic tree figures. 1.1 Motivation Coming soon! 1.2 Target Audience The course is intended for advanced undergraduates with an understanding of evolutionary biology, or for graduate students. Experience with R is not necessary but is helpful. 1.3 Curriculum Coming soon! "],["sign-in.html", "Chapter 2 Sign in", " Chapter 2 Sign in You need to sign into Terra with your Google account to allow your instructor to add you to projects and/or Workspaces associated with your specific class. This is the only way you can launch applications and perform computations on AnVIL. You can access Terra by going to anvil.terra.bio, or by clicking the link on the AnVIL home page. Sign in using the drop-down menu in the upper-left-hand corner. "],["create-a-workspace.html", "Chapter 3 Create a workspace", " Chapter 3 Create a workspace On AnVIL, you use Workspaces to configure and run analyses and share results. Workspaces support interactive analysis with RStudio, Jupyter notebooks, Bioconductor and Galaxy. Workspaces can also save the output generated by running an analysis with a Workspace’s associated “cloud environment.” Check out https://anvilproject.org to learn more about everything you can do within a Workspace. In the drop-down menu on the left, navigate to “Workspaces”. Click the triple bar in the top left corner to access the menu. Click “Workspaces”. Click on the plus icon near the top of left of the page. Name your Workspace and select the Billing Project as indicated by your instructor. Do not change the Bucket Location or Authorization Domain. You can add a Description if you wish. Click “CREATE WORKSPACE”. The new Workspace should now show up under your Workspaces. "],["rstudio.html", "Chapter 4 Working in RStudio 4.1 Launch RStudio Cloud Environment 4.2 Tour RStudio 4.3 Pause RStudio 4.4 Delete RStudio Cloud Environment 4.5 Video Guide", " Chapter 4 Working in RStudio Once you have created a Workspace, you can create an RStudio cloud environment. This will allow you to interface with data and perform genomics-based analyses with add on packages from the Bioconductor community. 4.1 Launch RStudio Cloud Environment Click on the name of the Workspace you just created. You should be routed to a link that looks like: https://anvil.terra.bio/#workspaces/&lt;billing-project&gt;/&lt;workspace-name&gt;. On the top right, Click the gear icon to access your Cloud Environment options. You will see a list of costs because it costs a small amount of money to use cloud computing. Click “CUSTOMIZE”. Click on the first drop down menu to see what other software configurations are available. Scroll down and select RStudio from the Community-Maintained RStudio Environments section. NOTE: AnVIL is very versatile and can scale up to use very powerful cloud computers. It’s very important that you select the cloud computing environment described here to avoid runaway costs. Leave everything else as-is. To create your RStudio Cloud Environment, click on the “CREATE” button. Your Cloud Environment will be available in a few minutes after the cloud resources are provisioned and your software starts up. The upper right corner displays the status and should say “Creating” while resources are being provisioned. After a few minutes, you will see the status change to “Running”. Click on the “R” icon to launch RStudio. You should now see the RStudio interface with information about the version printed to the console. 4.2 Tour RStudio Next, we will be using RStudio and the package Glimma to create interactive plots. See this vignette for more information. The Bioconductor team has created a very useful package to programmatically interact with Terra and Google Cloud. Install the AnVIL package. It will make some steps easier as we go along. BiocManager::install(&quot;AnVIL&quot;) You can now quickly install precompiled binaries using the AnVIL package’s install() function. We will use it to install the Glimma package and the airway package. The airway package contains a SummarizedExperiment data class. This data describes an RNA-Seq experiment on four human airway smooth muscle cell lines treated with dexamethasone. {Note: for some of the packages in this class, you will have to install packaged from the CRAN repository, using the install.packages() function. The examples will show you which install method to use.} ```r AnVIL::install(c(&quot;Glimma&quot;, &quot;airway&quot;)) ``` &lt;img src=&quot;resources/images/02-rstudio_files/figure-html//1BLTCaogA04bbeSD1tR1Wt-mVceQA6FHXa8FmFzIARrg_g11f12bc99af_0_56.png&quot; title=&quot;Screenshot of the RStudio environment interface. Code has been typed in the console and is highlighted.&quot; alt=&quot;Screenshot of the RStudio environment interface. Code has been typed in the console and is highlighted.&quot; width=&quot;480&quot; /&gt; Load the example data. library(airway) data(airway) The multidimensional scaling (MDS) plot is frequently used to explore differences in samples. When this data is MDS transformed, the first two dimensions explain the greatest variance between samples, and the amount of variance decreases monotonically with increasing dimension. The following code will launch a new window where you can interact with the MDS plot. Glimma::glimmaMDS(assay(airway), group = colData(airway)$dex) Change the colour_by setting to “groups” so you can easily distinguish between groups. In this data, the “group” is the treatment. You can download the interactive html file by clicking on “Save As”. You can also download plots and other files created directly in RStudio. To download the following plot, click on “Export” and save in your preferred format to the default directory. This saves the file in your cloud environment. limma::plotMDS(airway) You should see the plot in the “Files” pane. Select this file and click “More” &gt; “Export” Select “Download” to save the file to your local machine. 4.3 Pause RStudio The upper right corner reminds you that you are accruing cloud computing costs. You should minimize charges when you are not performing an analysis. You can do this by clicking on “Stop cloud environment”. This will release the CPU and memory resources for other people to use. Note that your work will be saved in the environment and continue to accrue a very small cost. Your instructor can delete these environments to stop costs accruing, so it’s a good idea to save code or output somewhere else, such as GitHub or your local machine. 4.4 Delete RStudio Cloud Environment Stopping your cloud environment only pauses your work. When you are ready to delete the cloud environment, click on the gear icon in the upper right corner to “Update cloud environment”. Click on “Delete Environment Options”. If you are certain that you do not need the data and configuration on your disk, you should select “Delete everything, including persistent disk”. Select “DELETE”. 4.5 Video Guide In addition to the steps above, you can review this video guide on how to launch RStudio on AnVIL. The slides for this tutorial are are located here. sessionInfo() ## R version 4.0.2 (2020-06-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] knitr_1.33 magrittr_2.0.2 hms_0.5.3 R6_2.4.1 ## [5] rlang_0.4.10 highr_0.8 stringr_1.4.0 httr_1.4.2 ## [9] tools_4.0.2 xfun_0.26 png_0.1-7 jquerylib_0.1.4 ## [13] htmltools_0.5.0 ellipsis_0.3.1 ottrpal_0.1.2 yaml_2.2.1 ## [17] digest_0.6.25 tibble_3.0.3 lifecycle_1.0.0 crayon_1.3.4 ## [21] bookdown_0.24 readr_1.4.0 vctrs_0.3.4 fs_1.5.0 ## [25] curl_4.3 evaluate_0.14 rmarkdown_2.10 stringi_1.5.3 ## [29] compiler_4.0.2 pillar_1.4.6 pkgconfig_2.0.3 "],["phylogenetics-basics.html", "Chapter 5 Phylogenetics basics 5.1 How to read a phylogenetic tree 5.2 Outgroups 5.3 Branch lengths", " Chapter 5 Phylogenetics basics 5.1 How to read a phylogenetic tree A phylogeny, or phylogenetic tree, is a diagram that shows the evolutionary history and relationships among or within groups of organisms. Phylogenetics was traditionally a somewhat obscure field in which systematists (biologists concerned with arranging organisms into a tree that showed their ancestral relatedness) arranged related living organisms at the tips (or “leaves” of the tree), and made branches to connect different organisms back to putative ancestral organisms. Here’s a phylogeny of the family Ursidae (the bears). In this tree, all the extant species (or currently living species) are at the tips on the far right side of the phylogeny. Inferences about how the bear species are related become apparent as you move away from the tips down the branches. When two branches meet at a node (as they do at point A), you can assume the species at the tips of those branches share a common ancestor. For example, this phylogeny of the Ursidae indicates that American black bears and Asian black bears share a common ancestor (indicated by the node at point A). However, we don’t know what the common ancestor is for certain, we are just inferring based on similarities between the species that exist today. Nodes that are closer to the tips indicate species that are more closely related (and thus indicate a more recent common ancestor than nodes farther away from the tips). American black bears are more closely related to Asian black bears than to American black bears are to giant pandas, because the American black bear branch connects to a node shared by the Asian black bear branch (point A) before it connects to a node shared with the giant panda branch (point B). Another unusual thing about phylogenies is we can change the order of the taxa on the tips without actually changing the topology of the tree. These two trees are the same, even though we have changed the position of the labels of American black bear and Asian black bear. In phylogenetic trees, relatedness is expressed by the distance to a common node between two species, NOT by whether the labels are near each other. Branches can rotate freely around nodes without changing the tree. 5.2 Outgroups Although this is a phylogeny of the Ursidae, you might have noticed there are two branches belonging to the gray wolf and the spotted seal, neither of which is a bear. These two species are included as outgroups. Outgroups are taxa that are only distantly related to the group of interest and serve as reference points for determining evolutionary changes. 5.3 Branch lengths Branch lengths (the distance between two nodes, or between a node and a tip), may or may not be indicative of the passage of a particular amount of time. It depends on how the tree was inferred (we infer phylogenetic trees, we don’t make them). If the tree is created by parsimony or neighbor-joining methods, the branches simply indicate that there was one (or more) change from the ancestor to the descendant. If the tree was created using maximum likelihood methods, the branch lengths represent how many genetic changes occurred over time. Regardless of how the trees are constructed, they are estimates of what we think happened historically. Each estimate contains within it implicit assumptions about rates of mutation accumulating, likelihood of different types of changes being more common (transitions vs. transversions, for example), and so on. The tree is our best hypothesis as to the history of the organisms on it, but it is only a hypothesis. At one time, only morphological data could be used to make these trees. Thus, phylogenetic trees might have been based on similarities of bone structures, or fur types, or other gross physiological features. Even though the trees were called “phylogenetic” trees, they were not based on genetic data. Now, phylogenetic trees are generally based on DNA sequence (for closely related species) or amino acid sequences (for more distantly related species). Furthermore, the trees are generally based on several genetic loci, rather than on the whole genome. This is changing, with next generation sequencing and advances in computing power. Nevertheless, at present most phylogenetic trees are “gene trees” rather than “species trees,” and it is important to remember that selection or drift on a particular locus can influence a tree so that it reflects the history of the gene, but NOT the history of the species "],["visualizing-trees-in-r.html", "Chapter 6 Visualizing trees in R 6.1 Creating a Newick object 6.2 Drawing trees 6.3 Adding outgroups 6.4 Drawing trees multiple ways 6.5 The phylo class", " Chapter 6 Visualizing trees in R 6.1 Creating a Newick object Computer programs use the Newick tree format for phylogenetic trees. This format uses a series of parentheses, commas, and colons to store information about evolutionary relationships. (A,B) indicates a pair of taxa that form their own group, or clade ((A,B),C) indicates the next most closely related taxon to the A-B clade is taxon C (A:5,B:7) tells the program (and us!) the length of the branch connecting each taxon to the node. In this case, the branch length between the node and A is 5 and the branch length for B is 7. The total distance between A and B is 5+7, or 12. ((A,B),C)); tells the program the tree is complete. If the semicolon is missing at the end, the program will keep looking for information on another taxon. For this exercise, we are going to create an R object in Newick formula that illustrates the relationships among several species of mammals. #install.packages(&#39;ape&#39;) #this installs the ape package #install.packages(&#39;nlme&#39;) #this installs the nlme package library(ape) #this opens the ape package library(nlme) #this opens the nlme package #we first create an object that stores the tree information mammal.1 &lt;- read.tree(text = &quot;((((raccoon:19.19959,bear:6.80041):0.84600, weasel:18.87953):2.09460):3.87382,dog:25.46154);&quot;) #typing the name of the object means R will tell us about it mammal.1 ## ## Phylogenetic tree with 4 tips and 4 internal nodes. ## ## Tip labels: ## raccoon, bear, ## weasel, dog ## ## Rooted; includes branch lengths. We now have a phylogenetic tree loaded into R. Why is it called Newick format? This is what Joe Felsenstein, one of the giants of the phylogenetic field, says: “The Newick Standard was adopted 26 June 1986 by an informal committee meeting convened by me during the Society for the Study of Evolution meetings in Durham, New Hampshire and consisting of James Archie, William H.E. Day, Wayne Maddison, Christopher Meacham, F. James Rohlf, David Swofford, and myself. (The committee was not an activity of the SSE nor endorsed by it). The reason for the name is that the second and final session of the committee met at Newick’s restaurant in Dover, New Hampshire, and we enjoyed the meal of lobsters. The tree representation was a generalization of one developed by Christopher Meacham in 1984 for the tree plotting programs that he wrote for the PHYLIP package while visiting Seattle. His visit was a sabbatical leave from the University of Georgia, which thus indirectly partly funded that work.” 6.2 Drawing trees It is quite difficult for humans to quickly interpret the relationships and branch lengths in the Newick format. Luckily, R (and other phylogenetics programs) can convert Newick formats into a more understandable form. #plot is the command we use to create trees with the ape package #one of the options is the type of tree the command draws #this can also be written as plot(mammal.1, &quot;u&quot;) plot(mammal.1, type=&quot;unrooted&quot;) You’ve inferred an unrooted tree. It probably looks a bit different than trees you’ve seen before (including the one in the previous section); most trees are displayed in a rooted form. We can do that by specifying that we want to draw a phylogram. If you don’t declare an outgroup first, R will choose to root the phylogram halfway between the two longest branches (this is called midpoint rooting). #here we draw a phylogram #alternatively, you can use the command: #plot(plot(mammal.1), as phylogram is the default type plot(mammal.1, type=&quot;phylogram&quot;) Now the tree looks more like the Ursidae tree we examined earlier. The order of the tips is partly determined by the order in which we wrote the taxa in our Newick format. We can change the order of the tips and still have the same tree. mammal.2 &lt;- read.tree(text = &quot;((((bear:6.80041,raccoon:19.19959):0.84600, weasel:18.87953):2.09460):3.87382,dog:25.46154);&quot;) #this bit of code here tells R to put the trees in side-by-side in #a single row (1 row, 2 columns) par(mfrow=c(1,2)) plot(mammal.1) plot(mammal.2) Clades can rotate freely around nodes without changing the relationships among the tips. Although the “weasel” label is closer to “bear” in our first tree than it is in the second tree, the evolutionary distance between the two is the same in both trees, because we trace through the same nodes to find their common ancestor. Both of these trees are exactly the same, in a phylogenetic sense. 6.3 Adding outgroups Let’s add some more taxa to our tree! mammal.3 &lt;- read.tree(text = &quot;((raccoon:19.19959,bear:6.80041):0.84600,((sea_lion:11.99700, seal:12.00300):7.52973,((monkey:100.85930,cat:47.14069):20.59201, weasel:18.87953):2.09460):3.87382,dog:25.46154);&quot;) mammal.3 ## ## Phylogenetic tree with 8 tips and 6 internal nodes. ## ## Tip labels: ## raccoon, bear, sea_lion, ## seal, monkey, cat, ... ## ## Unrooted; includes branch lengths. We’ve now added an additional 5 taxa to our tree of mammalian species. Let’s first take a look at the unrooted tree. plot(mammal.3, type=&quot;u&quot;)#&quot;u&quot; is short for &quot;unrooted&quot; Even with the unrooted tree, we can see that some species are definitely more closely related than others. In fact, it looks like both “cat” and “monkey” are pretty distantly related to the others, since the branches connecting these taxa are much longer than any other branch. Given this information, we will define these two taxa as our outgroup and redraw our tree, this time as a rooted phylogram. #this command tells R that monkey and cat are outgroups mammal.3.root &lt;- root(mammal.3, outgroup = c(&#39;monkey&#39;,&#39;cat&#39;)) plot(mammal.3.root, type=&quot;p&quot;)#&quot;p&quot; is short for &quot;phylogram&quot; 6.4 Drawing trees multiple ways So far you’ve drawn trees in two ways - unrooted, and as a phylogram. For both of these tree types, the branch lengths are scaled to indicate evolutionary distance (or how many changes have occurred). As a result, the tips aren’t all even with each other. There are two other common ways of drawing trees. The radial tree (sometimes called the fan tree) arranges all the branches in a circle. This is a popular way to draw a phylogeny with many tips that would otherwise take up a lot of space. #now we&#39;re looking at three different trees next to each other #basically, figures are in 1 row and 3 columns par(mfrow=c(1,3)) plot(mammal.3, type=&quot;u&quot;) plot(mammal.3.root, type=&quot;p&quot;) plot(mammal.3.root, type=&quot;f&quot;)#f is short for &quot;fan&quot; All three of these trees show exactly the same information. The last common way to draw trees is as a cladogram. Cladograms are a little different than the others, because the branches are not scaled to evolutionary distance. Instead, the tree is drawn so that all the tips (taxa) are lined up. It is often easier to see relationships in a cladogram, particularly if the internode distances (the distance between two internal nodes of a tree) are small. To properly draw a cladogram, we will rewrite our tree in Newick formula so that it doesn’t include branch lengths. mammal.4 &lt;- read.tree(text = &quot;(dog,(raccoon,bear),((seal,sea_lion), ((monkey,cat), weasel)));&quot;) mammal.4.root &lt;- root(mammal.4, outgroup = c(&#39;monkey&#39;,&#39;cat&#39;)) par(mfrow=c(1,2)) plot(mammal.3.root, type=&quot;p&quot;) plot(mammal.4.root, type=&quot;c&quot;)#c is short for &quot;cladogram&quot; QUESTIONS What is the total branch length between “bear” and “raccoon”? (You will need to look at the tree in Newick format.) Does “weasel” share a more common recent ancestor with “seal” or with “sea lion”? Why does it look like “weasel” is more closely related to “bear” in the tree with four taxa, but it looks like “dog” is more closely related to “bear” in the tree with eight taxa? (HINT: Think about the purpose of an outgroup, and whether we specified one for the four-taxa tree.) 6.5 The phylo class When we use the ape package, R converts a tree in Newick format to an object of the phylo class. This is basically a list of four dataframes. str(mammal.3.root) ## List of 4 ## $ edge : int [1:13, 1:2] 9 14 12 10 11 11 10 12 13 13 ... ## $ edge.length: num [1:13] 20.592 2.095 3.874 0.846 19.2 ... ## $ Nnode : int 6 ## $ tip.label : chr [1:8] &quot;raccoon&quot; &quot;bear&quot; &quot;sea_lion&quot; &quot;\\nseal&quot; ... ## - attr(*, &quot;class&quot;)= chr &quot;phylo&quot; ## - attr(*, &quot;order&quot;)= chr &quot;cladewise&quot; Each dataframe holds information about some part of the tree. edge: the number of steps needed to connect two tips. It’s easiest to think of each branch as an edge. edge.length: the length of each corresponding edge, or branch Nnode: the number of nodes in the tree tip.label: the tip names (the taxa) sessionInfo() ## R version 4.0.2 (2020-06-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] nlme_3.1-149 ape_5.4-1 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.8 knitr_1.33 magrittr_2.0.2 hms_0.5.3 ## [5] lattice_0.20-41 R6_2.4.1 rlang_0.4.10 highr_0.8 ## [9] stringr_1.4.0 tools_4.0.2 parallel_4.0.2 grid_4.0.2 ## [13] xfun_0.26 jquerylib_0.1.4 htmltools_0.5.0 ellipsis_0.3.1 ## [17] ottrpal_0.1.2 yaml_2.2.1 digest_0.6.25 tibble_3.0.3 ## [21] lifecycle_1.0.0 crayon_1.3.4 bookdown_0.24 readr_1.4.0 ## [25] vctrs_0.3.4 fs_1.5.0 evaluate_0.14 rmarkdown_2.10 ## [29] stringi_1.5.3 compiler_4.0.2 pillar_1.4.6 pkgconfig_2.0.3 "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor Elizabeth Humphries Content Idea Contributor Ava Hoffman, Frederick Tan Content Directors Elizabeth Humphries, Jeff Leek, Frederick Tan Production Content Publisher Ira Gooding Technical Template Publishing Engineers Candace Savonen, Carrie Wright, Ava Hoffman Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Candace Savonen Package Developers (ottrpal) John Muschelli, Candace Savonen, Carrie Wright Funding Funder National Human Genome Research Institute (NHGRI) Funding Staff Fallon Bachman, Jennifer Vessio, Emily Voeglein   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.3 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2022-05-30 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.3) ## bookdown 0.24 2022-02-15 [1] Github (rstudio/bookdown@88bc4ea) ## callr 3.4.4 2020-09-07 [1] RSPM (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] RSPM (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [1] RSPM (R 4.0.3) ## fansi 0.4.1 2020-01-08 [1] RSPM (R 4.0.0) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] RSPM (R 4.0.1) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## knitr 1.33 2022-02-15 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.2) ## magrittr 2.0.2 2022-01-26 [1] CRAN (R 4.0.2) ## memoise 1.1.0 2017-04-21 [1] RSPM (R 4.0.0) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.3.4 2020-08-11 [1] RSPM (R 4.0.2) ## purrr 0.3.4 2020-04-17 [1] RSPM (R 4.0.3) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## rlang 0.4.10 2022-02-15 [1] Github (r-lib/rlang@f0c9be5) ## rmarkdown 2.10 2022-02-15 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2022-02-15 [1] Github (R-lib/testthat@e99155a) ## usethis 2.1.5.9000 2022-02-15 [1] Github (r-lib/usethis@57b109a) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2022-02-15 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library 2022 GitHub, Inc. Terms Privacy Security Status Doc "],["references.html", "Chapter 7 References", " Chapter 7 References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
